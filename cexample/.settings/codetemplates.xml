<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.constructorcomment_context" deleted="false" description="Comment for created constructors" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.constructorcomment" name="constructorcomment">/*
 *
 */</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.destructorcomment_context" deleted="false" description="Comment for created destructors" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.destructorcomment" name="destructorcomment">/*
 *
 */</template><template autoinsert="false" context="org.eclipse.cdt.ui.text.codetemplates.filecomment_context" deleted="false" description="Comment for created C/C++ files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.filecomment" name="filecomment">/**
 * @file   ${file_name}
 * @author ${user}
 * @date   ${date}
 * 
 * TODO: write detailled description here
 */
</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.typecomment_context" deleted="false" description="Comment for created classes" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.typecomment" name="typecomment">/*
 *
 */</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.fieldcomment_context" deleted="false" description="Comment for fields" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.fieldcomment" name="fieldcomment">/*
 *
 */</template><template autoinsert="false" context="org.eclipse.cdt.ui.text.codetemplates.methodcomment_context" deleted="false" description="Comment for methods" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.methodcomment" name="methodcomment">/**
 * TODO: write detailled description here
 * 
 * @param var1 this is an argument description
 * @return describe return value here
 */</template><template autoinsert="true" context="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted="false" description="Default template for newly created C++ source files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.cppsourcefile" name="Default C++ source template">${filecomment}
${includes}

${namespace_begin}

${declarations}

${namespace_end}</template><template autoinsert="true" context="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted="false" description="Default template for newly created C++ test files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.cpptestfile" name="Default C++ test template">${filecomment}
${includes}

${namespace_begin}

${declarations}

${namespace_end}</template><template autoinsert="false" context="org.eclipse.cdt.core.cxxHeader.contenttype_context" deleted="false" description="Default template for newly created C++ header files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.cppheaderfile" name="Default C++ header template">${filecomment}
#ifndef ${include_guard_symbol}
#define ${include_guard_symbol}

${includes}

${namespace_begin}

${declarations}

${namespace_end}

#endif /* ${include_guard_symbol} */</template><template autoinsert="true" context="org.eclipse.cdt.core.cSource.contenttype_context" deleted="false" description="Default template for newly created C source files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.csourcefile" name="Default C source template">${filecomment}
${includes}

${declarations}</template><template autoinsert="false" context="org.eclipse.cdt.core.cHeader.contenttype_context" deleted="false" description="Default template for newly created C header files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.cheaderfile" name="Default C header template">/**
 * @copydoc TODO: add *.c file here
 */
#ifdef __cplusplus
extern "C" {
#endif
#ifndef ${include_guard_symbol}
#define ${include_guard_symbol}

${includes}

${declarations}

#endif /* ${include_guard_symbol} */
#ifdef __cplusplus
}
#endif</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.namespace_context" deleted="false" description="Beginning of namespace declaration" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.namespace_begin" name="namespace_begin">namespace ${namespace_name} {</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.namespace_context" deleted="false" description="End of namespace declaration" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.namespace_end" name="namespace_end">} /* namespace ${namespace_name} */</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.class_context" deleted="false" description="Code in created class definitions" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.class_body" name="class_body">${declarations}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.methodbody_context" deleted="false" description="Code in created method stubs" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.methodbody" name="methodbody">	// ${todo} Auto-generated method stub
	${body_statement}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.constructorbody_context" deleted="false" description="Code in created constructor stubs" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.constructorbody" name="constructorbody">	// ${todo} Auto-generated constructor stub
	${body_statement}</template><template autoinsert="true" context="org.eclipse.cdt.ui.text.codetemplates.destructorbody_context" deleted="false" description="Code in created destructor stubs" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.destructorbody" name="destructorbody">	${body_statement}
	// ${todo} Auto-generated destructor stub</template><template autoinsert="true" context="org.eclipse.cdt.core.asmSource.contenttype_context" deleted="false" description="Default template for newly created assembly files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.asmsourcefile" name="Default assembly template">${filecomment}
</template><template autoinsert="true" context="org.eclipse.core.runtime.text.contenttype_context" deleted="false" description="Default template for newly created text files" enabled="true" id="org.eclipse.cdt.ui.text.codetemplates.textfile" name="Default text file template">${file_name}
 Created on: ${date}
     Author: ${user}

</template><template autoinsert="false" context="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted="false" description="" enabled="true" name="test c">${filecomment}&#13;
#include "gtest/gtest.h"&#13;
#include "fff/fff.h"&#13;
#include "yourfile.h"&#13;
&#13;
DEFINE_FFF_GLOBALS ///&lt; defines some fff variables&#13;
&#13;
FAKE_VALUE_FUNC(int, methodtomock, int, int); ///&lt; example mock of method with two arguments and return value&#13;
&#13;
/**&#13;
 * TODO: write test class summary&#13;
 */&#13;
class Test_yourfile : public ::testing::Test&#13;
{&#13;
public:&#13;
	/**&#13;
	 * Is called before each test&#13;
	 */&#13;
	void SetUp()&#13;
	{&#13;
&#13;
	}&#13;
&#13;
	/**&#13;
	 * Is called after each test&#13;
	 */&#13;
	void TearDown()&#13;
	{&#13;
		// reset fakes: must be done for each fake&#13;
		RESET_FAKE(methodtomock);&#13;
&#13;
		// reset fake history is needed in order to check call history&#13;
		FFF_RESET_HISTORY();&#13;
	}&#13;
};&#13;
&#13;
/**&#13;
 * Test example&#13;
 * @param Test_yourfile Test class which contains SetUp and TearDown.&#13;
 * Is also test group name.&#13;
 * @param mac Test case name.&#13;
 */&#13;
&#13;
TEST_F(Test_yourfile, testcase)&#13;
{&#13;
	ASSERT_TRUE(true);&#13;
}&#13;
&#13;
/**&#13;
 * main method for calling tests in this file.&#13;
 */&#13;
int main(int argc, char **argv)&#13;
{&#13;
  ::testing::InitGoogleTest(&amp;argc, argv);&#13;
  return RUN_ALL_TESTS();&#13;
}</template><template autoinsert="false" context="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted="false" description="" enabled="true" name="test cpp">${filecomment}&#13;
#include "gtest/gtest.h"&#13;
#include "yourfile.h"&#13;
/**&#13;
 * TODO: write test class summary&#13;
 */&#13;
class Test_YourClass : public ::testing::Test&#13;
{&#13;
protected:&#13;
	YourClass objectToTest; ///&lt; make object of your class here&#13;
public:&#13;
	/**&#13;
	 * Is called before each test&#13;
	 */&#13;
	void SetUp()&#13;
	{&#13;
&#13;
	}&#13;
&#13;
	/**&#13;
	 * Is called after each test&#13;
	 */&#13;
	void TearDown()&#13;
	{&#13;
&#13;
	}&#13;
};&#13;
&#13;
/**&#13;
 * Test example&#13;
 * @param Test_YourClass Test class which contains SetUp and TearDown.&#13;
 * Is also test group name.&#13;
 * @param mac Test case name.&#13;
 */&#13;
TEST_F(Test_YourClass, testcase)&#13;
{&#13;
	ASSERT_TRUE(true);&#13;
}&#13;
</template></templates>